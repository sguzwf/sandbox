// Generated by LiveScript 1.2.0
(function(){
  var Brainfuck;
  Brainfuck = (function(){
    Brainfuck.displayName = 'Brainfuck';
    var prototype = Brainfuck.prototype, constructor = Brainfuck;
    function Brainfuck(size){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.size = size != null ? size : 3000;
      this$.stack = [];
      this$.pc = 0;
      this$.memory = [];
      this$.pointer = 0;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.input = function(){
      return ' ';
    };
    prototype.output = function(){};
    prototype.exec = function(program){
      var i$, to$, i, ref$;
      program = Array.prototype.filter.call(program, (function(it){
        return in$(it, '><+-,.[]');
      }));
      this.pc = 0;
      this.pointer = 0;
      for (i$ = 0, to$ = this.size; i$ < to$; ++i$) {
        i = i$;
        this.memory[i] = 0;
      }
      while (this.pc < program.length) {
        switch (program[this.pc]) {
        case '>':
          ++this.pointer;
          break;
        case '<':
          --this.pointer;
          break;
        case '+':
          ++this.memory[this.pointer];
          break;
        case '-':
          --this.memory[this.pointer];
          break;
        case ',':
          this.memory[this.pointer] = this.input().charCodeAt[0] % 256;
          break;
        case '.':
          this.output(String.fromCharCode(this.memory[this.pointer]));
          break;
        case '[':
          this.stack.push(this.pc);
          break;
        case ']':
          if (this.memory[this.pointer]) {
            this.pc = (ref$ = this.stack)[ref$.length - 1];
          } else {
            this.stack.pop();
          }
          break;
        default:
          throw new Error('unknown op');
        }
        this.pointer = (this.pointer + this.size) % this.size;
        ++this.pc;
      }
    };
    return Brainfuck;
  }());
  module.exports = Brainfuck;
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
